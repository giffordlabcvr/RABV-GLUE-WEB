apply plugin: 'war'
apply plugin: 'pl.allegro.tech.build.axion-release'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'com.bmuschko.cargo'

project.ext.set("glueVersion", "1.1.107")

ssh.settings { knownHosts = allowAnyHosts }

project.version = scmVersion.version

remotes {
  rabvglue_cvr {
    host = 'rabv-glue.cvr.gla.ac.uk'
    user = 'am589p'
    identity = file('/Users/imacadmin/.ssh/rabv_glue_id_rsa')
  }
  
}

repositories {
	mavenLocal()
	// cargo
	mavenCentral()
}

configurations {
	gluetoolsWebWar
	gluetoolsWsWar
	gluetoolsCore
}

dependencies {
    gluetoolsWebWar group: 'cvr.ac.uk', name: 'gluetools-web', version: project.glueVersion, transitive: false
    gluetoolsWsWar group: 'cvr.ac.uk', name: 'gluetools-ws', version: project.glueVersion, transitive: false
    gluetoolsCore group: 'cvr.ac.uk', name: 'gluetools-core', version: project.glueVersion, transitive: false
    cargo group: 'org.codehaus.cargo', name: 'cargo-core-uberjar', version: '1.7.4'
	cargo group: 'org.codehaus.cargo', name: 'cargo-ant', version: '1.7.4'
}


buildscript {
  repositories {
    // for ssh-deploy stuff, cargo
    jcenter()
    // for axion-release
    mavenCentral()
  }
  dependencies {
    classpath group: 'org.hidetake', name: 'gradle-ssh-plugin', version: '1.1.3'
    classpath group: 'commons-io', name: 'commons-io', version: '1.3.2'
    classpath group: 'pl.allegro.tech.build', name: 'axion-release-plugin', version: '1.9.3'
    classpath group: 'com.bmuschko', name: 'gradle-cargo-plugin', version:'2.6'
  }
}

task deployDeps(dependsOn: ['copyGluetoolsWebWar', 
	'gluetoolsWsWithContextWar', 'deployGluetoolsConfigRabvGlueCVR'])

cargoRedeployRemote.dependsOn deployDeps

cargo {
    containerId = 'tomcat7x'
    port = 80
    
    deployable {
    	file = new File(buildDir, 'runtimeWars/gluetools-ws.war')
        context = '/gluetools-ws'
    }
    deployable {
    	file = new File(buildDir, 'runtimeWars/gluetools-web.war')
        context = '/gluetools-web'
    }

	// rabvGlue war has context path /
    deployable {
        context = '/'
    }

    remote {
        hostname = 'rabv-glue.cvr.gla.ac.uk'
        // credentials in ~/.gradle/gradle.properties
        username = System.getProperty("rabv_glue.tomcat.mgmt.username")
        password = System.getProperty("rabv_glue.tomcat.mgmt.password")
    }
}

war {
	webAppDirName = 'WebContent'
	archiveName 'rabvGlue.war'
}

task copyGluetoolsJar(type: Copy) {
    from configurations.gluetoolsCore
    into "$buildDir/runtimeJars"
    rename('gluetools-core-'+project.glueVersion+'.jar', 'gluetools-core.jar')
}

task copyGluetoolsWebWar(type: Copy) {
    from configurations.gluetoolsWebWar
    into "$buildDir/runtimeWars"
    rename('gluetools-web-'+project.glueVersion+'.war', 'gluetools-web.war')
}

task copyGluetoolsWsWar(type: Copy) {
    from configurations.gluetoolsWsWar
    into "$buildDir/runtimeWars"
    rename('gluetools-ws-'+project.glueVersion+'.war', 'gluetools-ws-without-context.war')
}

task gluetoolsWsWithContextWar(type: Jar, dependsOn: copyGluetoolsWsWar) {
    destinationDir = new File(buildDir, 'runtimeWars')
    archiveName = 'gluetools-ws.war' 
    from zipTree(new File(buildDir, 'runtimeWars/gluetools-ws-without-context.war'))
    from(file("rabvglue_cvr/gluetools-ws-context.xml")) {
        into ('META-INF')
        rename("gluetools-ws-context.xml", "context.xml")
    }
}

task deployAll(dependsOn: ['cargoRedeployRemote'])


// gluetools xml config for CVR vm 
task deployGluetoolsConfigRabvGlueCVR() {
  ext.file = new File(projectDir, '/rabvglue_cvr/rabv-glue-gluetools-config.xml')
  ext.touchfile = new File(buildDir, '/deployGluetoolsConfigRabvGlueCVR.touchfile')
  inputs.file file
  outputs.file touchfile
  doLast {
	  println "Uploading "+file.name
	  ssh.run {
	    session(remotes.rabvglue_cvr) {
	      put from: file.absolutePath, into: '/tmp/rabv-glue-gluetools-config.xml'
	      execute 'mv /tmp/rabv-glue-gluetools-config.xml /opt/gluetools/conf'
	    }
	  }
	  touchfile.delete()
	  buildDir.mkdirs()
	  touchfile.createNewFile()
  }
}

def scmCustomKey = '/Users/imacadmin/.ssh/github_id_rsa'

scmVersion {
	hooks {
		pre 'commit', {v, p -> "Release version $v"}
    }

    scmVersion {
        versionCreator 'versionWithBranch'
	    repository {
	        customKey = file(scmCustomKey)
	    }
	    tag {
	        prefix = 'RABV-GLUE-WEB'
	    }
    }

}
